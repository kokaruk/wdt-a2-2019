// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WdtA2Api.Data;

namespace WdtA2Api.Migrations
{
    [DbContext(typeof(WdtA2ApiContext))]
    partial class WdtA2ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WdtModels.ApiModels.AccessLevel", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Name");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("WdtModels.ApiModels.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessName")
                        .HasColumnName("AccessLevel");

                    b.Property<string>("Answer")
                        .IsRequired();

                    b.Property<string>("Question")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AccessName");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("WdtModels.ApiModels.Room", b =>
                {
                    b.Property<string>("RoomID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.HasKey("RoomID");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("WdtModels.ApiModels.Slot", b =>
                {
                    b.Property<string>("RoomID");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("StaffID")
                        .IsRequired();

                    b.Property<string>("StudentID")
                        .HasColumnName("BookedInStudentID");

                    b.HasKey("RoomID", "StartTime");

                    b.HasIndex("StaffID");

                    b.HasIndex("StudentID");

                    b.ToTable("Slot");
                });

            modelBuilder.Entity("WdtModels.ApiModels.User", b =>
                {
                    b.Property<string>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(8);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("WdtModels.ApiModels.Faq", b =>
                {
                    b.HasOne("WdtModels.ApiModels.AccessLevel", "Access")
                        .WithMany()
                        .HasForeignKey("AccessName");
                });

            modelBuilder.Entity("WdtModels.ApiModels.Slot", b =>
                {
                    b.HasOne("WdtModels.ApiModels.Room", "Room")
                        .WithMany("Slots")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WdtModels.ApiModels.User", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WdtModels.ApiModels.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");
                });
#pragma warning restore 612, 618
        }
    }
}
